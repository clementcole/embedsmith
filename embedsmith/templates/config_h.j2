/**
 * Configuration header file
 * Project: ${project_name}
 * Author: ${author}
 * Version: ${version}
 */

#ifndef CONFIG_H
#define CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif

// MCU Configuration
#define MCU_${mcu.upper().replace('-', '_')}
#define CPU_FREQ_HZ 16000000U
#define SYSTICK_FREQ_HZ 1000U

// Memory Configuration
#define FLASH_SIZE ${flash_size}
#define RAM_SIZE ${ram_size}
#define FLASH_START ${flash_start}
#define RAM_START ${ram_start}

// Peripheral Configuration
#define UART_BAUDRATE 115200
#define I2C_FREQ 100000
#define SPI_FREQ 1000000

// Feature Flags
#define USE_UART 1
#define USE_I2C 0
#define USE_SPI 0
#define USE_ADC 0
#define USE_PWM 0

// Debug Configuration
#define DEBUG_ENABLED 1
#define ASSERT_ENABLED 1

#ifdef DEBUG_ENABLED
    #include <stdio.h>
    #define DEBUG_PRINT(fmt, ...) printf("[DEBUG] " fmt "\r\n", ##__VA_ARGS__)
#else
    #define DEBUG_PRINT(fmt, ...)
#endif

#ifdef ASSERT_ENABLED
    #define ASSERT(expr) \
        do { \
            if (!(expr)) { \
                DEBUG_PRINT("Assertion failed: %s, file %s, line %d", \
                          #expr, __FILE__, __LINE__); \
                while(1); \
            } \
        } while(0)
#else
    #define ASSERT(expr)
#endif

// Error codes
typedef enum {
    ERROR_NONE = 0,
    ERROR_INVALID_PARAM = -1,
    ERROR_TIMEOUT = -2,
    ERROR_HARDWARE = -3,
    ERROR_MEMORY = -4,
} error_t;

// Function prototypes
void system_clock_config(void);
void peripheral_init(void);
void error_handler(const char* message);

#ifdef __cplusplus
}
#endif

#endif // CONFIG_H