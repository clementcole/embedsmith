# ${project_name} - Embedded Firmware Makefile
# Generated by embedsmith v1.0.0
# MCU: ${mcu}, Toolchain: ${compiler}

# Toolchain configuration
CC = ${compiler}
CXX = ${compiler}-g++
OBJCOPY = ${compiler}-objcopy
OBJDUMP = ${compiler}-objdump
SIZE = ${compiler}-size
GDB = ${compiler}-gdb

# Project configuration
PROJECT_NAME = ${project_name}
TARGET = $(PROJECT_NAME).elf
MCU = ${mcu}

# Directories
SRC_DIR = src
INC_DIR = include
DRIVER_DIR = drivers
LD_DIR = linker_scripts
BUILD_DIR = build
OBJ_DIR = $(BUILD_DIR)/obj

# Source files
C_SRCS = $(wildcard $(SRC_DIR)/*.c)
C_SRCS += $(wildcard $(DRIVER_DIR)/*.c)
ASM_SRCS = $(wildcard $(SRC_DIR)/*.s)

# Object files
OBJS = $(C_SRCS:%.c=$(OBJ_DIR)/%.o) $(ASM_SRCS:%.s=$(OBJ_DIR)/%.o)

# Compiler flags
CPUFLAGS = -mcpu=$(MCU) -mthumb
CFLAGS = $(CPUFLAGS) -Wall -Wextra -Wpedantic -g -O0
CFLAGS += -I$(INC_DIR) -I$(DRIVER_DIR)
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -DMCU_$(shell echo $(MCU) | tr 'a-z-' 'A-Z_')

# Linker flags
LDFLAGS = $(CPUFLAGS) -specs=nano.specs
LDFLAGS += -Wl,-Map=$(BUILD_DIR)/$(PROJECT_NAME).map
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -T$(LD_DIR)/linker_script.ld

# Default target
all: $(BUILD_DIR)/$(TARGET)

# Create build directories
$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(OBJ_DIR)/$(SRC_DIR)
	@mkdir -p $(OBJ_DIR)/$(DRIVER_DIR)

# Compile C sources
$(OBJ_DIR)/%.o: %.c | $(OBJ_DIR)
	@echo "üî® Compiling $<"
	@$(CC) $(CFLAGS) -c $< -o $@

# Compile assembly sources
$(OBJ_DIR)/%.o: %.s | $(OBJ_DIR)
	@echo "üî® Assembling $<"
	@$(CC) $(CFLAGS) -c $< -o $@

# Link object files
$(BUILD_DIR)/$(TARGET): $(OBJS)
	@echo "üîó Linking $@"
	@$(CC) $(OBJS) $(LDFLAGS) -o $@
	@$(SIZE) $@
	@echo "‚úÖ Build complete: $@"

# Generate binary file
$(BUILD_DIR)/$(PROJECT_NAME).bin: $(BUILD_DIR)/$(TARGET)
	@$(OBJCOPY) -O binary $< $@
	@echo "üì¶ Generated: $@"

# Generate hex file
$(BUILD_DIR)/$(PROJECT_NAME).hex: $(BUILD_DIR)/$(TARGET)
	@$(OBJCOPY) -O ihex $< $@
	@echo "üì¶ Generated: $@"

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR)
	@echo "‚úÖ Clean complete"

# Flash the firmware (update for your programmer)
flash: $(BUILD_DIR)/$(PROJECT_NAME).bin
	@echo "‚ö° Flashing firmware..."
	@echo "‚ö†Ô∏è  Update flash command for your programmer in Makefile"
	# Example for ST-Link:
	# st-flash write $< 0x08000000
	# Example for OpenOCD:
	# openocd -f interface/stlink.cfg -f target/stm32f4x.cfg -c "program $< verify reset exit"

# Debug with GDB
debug: $(BUILD_DIR)/$(TARGET)
	@echo "üêõ Starting GDB session..."
	@$(GDB) $<

# Show memory usage
size: $(BUILD_DIR)/$(TARGET)
	@$(SIZE) $@

# Create listing file
listing: $(BUILD_DIR)/$(TARGET)
	@$(OBJDUMP) -S $< > $(BUILD_DIR)/$(PROJECT_NAME).lst
	@echo "üìù Generated listing: $(BUILD_DIR)/$(PROJECT_NAME).lst"

.PHONY: all clean flash debug size listing