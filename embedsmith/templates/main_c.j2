/**
 * ${project_name} - Main Application
 * 
 * Project: ${project_name}
 * MCU: ${mcu}
 * Author: ${author}
 * Version: ${version}
 * License: ${license}
 * 
 * Description: ${description}
 * 
 * Generated by embedsmith v1.0.0
 */

#include "config.h"
#include "system.h"

// Private function prototypes
static void SystemClock_Config(void);
static void GPIO_Init(void);
static void Error_Handler(void);

int main(void) {
    // System initialization
    HAL_Init();
    SystemClock_Config();
    GPIO_Init();
    
    // Initialize peripherals
    UART_Init();
    SPI_Init();
    I2C_Init();
    
    // Application setup
    printf("ðŸš€ ${project_name} starting...\r\n");
    printf("ðŸ”§ MCU: ${mcu}\r\n");
    printf("âš¡ Flash: ${flash_size}, RAM: ${ram_size}\r\n");
    printf("ðŸ“… Built: __DATE__ " __TIME__ "\r\n");
    
    // Main application loop
    while (1) {
        // Application logic here
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        HAL_Delay(500);
        
        // Process commands
        Process_Commands();
        
        // Update system state
        System_Update();
    }
    
    return 0;
}

/**
 * @brief System Clock Configuration
 */
static void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    
    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
    
    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 100;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }
    
    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
        Error_Handler();
    }
}

/**
 * @brief GPIO Initialization
 */
static void GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    
    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();
    
    // Configure LED GPIO
    GPIO_InitStruct.Pin = LED_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
}

/**
 * @brief Error Handler
 */
static void Error_Handler(void) {
    // Turn on error LED
    HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
    
    while (1) {
        // Blink error pattern
        HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
        HAL_Delay(100);
    }
}

// Weak implementations for peripheral initializations
__weak void UART_Init(void) {
    // Implement in uart.c
}

__weak void SPI_Init(void) {
    // Implement in spi.c
}

__weak void I2C_Init(void) {
    // Implement in i2c.c
}

__weak void Process_Commands(void) {
    // Implement command processing
}

__weak void System_Update(void) {
    // Implement system state updates
}